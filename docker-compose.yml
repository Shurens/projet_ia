services:
  db:
    image: mysql:latest
    container_name: db_films
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3306:3306"
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h db -u${MYSQL_USER} -p${MYSQL_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
          - projet

  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    container_name: phpmyadmin
    environment:
      PMA_HOST: db  
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    ports:
      - "8080:80"
    depends_on:
      - db
    networks:
          - projet
  
  # mlflow:
  #   image: continuumio/miniconda3
  #   container_name: mlflow
  #   volumes:
  #     - ./mlflow:/mlflow
  #   ports:
  #     - "5000:5000"
  #   working_dir: /mlflow
  #   command: >
  #     /bin/bash -c "pip install mlflow mysql-connector-python pymysql &&
  #                   mlflow server --backend-store-uri mysql+pymysql://${MYSQL_USER}:${MYSQL_PASSWORD}@db:3306/${MYSQL_DATABASE} --default-artifact-root /mlflow/artifacts --host 0.0.0.0 --port 5000"
  
  fastapi:
    build:
      context: ./api  
      dockerfile: Dockerfile.api
    container_name: fastapi
    depends_on:
      - db
    ports:
      - "8081:8081"
    environment:
      DATABASE_URL: mysql+pymysql://${MYSQL_USER}:${MYSQL_PASSWORD}@db:3306/${MYSQL_DATABASE}
    networks:
        - projet

  initialize:
    build:
      context: ./api
      dockerfile: Dockerfile.init
    container_name: init_service
    depends_on:
      db:
        condition: service_healthy
      fastapi:
        condition: service_started
    restart: "no"
    networks:
        - projet

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus_data/prometheus.yml:/etc/prometheus/prometheus.yml  
      - prometheus_data:/prometheus  # Volume pour persister les donn√©es
    ports:
      - "9090:9090"
    networks:
      - projet



  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"  
    environment:
      - GF_SECURITY_ADMIN_PASSWORD= ${GF_SECURITY_ADMIN_PASSWORD}  
      - GF_SECURITY_ALLOW_EMBEDDING=true
    depends_on:
      - prometheus
    volumes:
      - grafana_data:/var/lib/grafana  # Volume pour persister les dashboards
    networks:
        - projet

  flask:
    build:
      context: ./web
      dockerfile: Dockerfile.flask
    container_name: flask_app
    depends_on:
      - db
    ports:
      - "5000:5000"
    networks:
      - projet

volumes:
  grafana_data:
  prometheus_data:

networks:
  projet:
    driver: bridge