name: CI

on:
  push:
    branches:
      - '*'  

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Create .env file
        run: |
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env
          echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> .env
          echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" >> .env
          echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env
          echo "GF_SECURITY_ADMIN_PASSWORD=${{ secrets.GF_SECURITY_ADMIN_PASSWORD }}" >> .env

      - name: Create .env file in the api directory
        run: |
          echo "ADMIN_USERNAME=${{ secrets.ADMIN_USERNAME }}" >> api/.env
          echo "ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}" >> api/.env
          echo "USER_USERNAME=${{ secrets.USER_USERNAME }}" >> api/.env
          echo "USER_PASSWORD=${{ secrets.USER_PASSWORD }}" >> api/.env

      - name: Set up Docker
        run: |
          sudo apt-get update
          sudo apt-get install -y docker.io

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version  # VÃ©rifier l'installation de Docker Compose

      - name: Run Docker Compose
        run: |
          docker-compose -f docker-compose-test.yml up --build --abort-on-container-exit


